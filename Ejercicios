/////Clase main
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Declaracion del arreglo de vértices
        Vertice[] vertices = new Vertice[5];

        // Creamos el ciclo do-while para mostrar el menu
        int opcion;
        do {
            System.out.println("\nMenu:");
            System.out.println("1. Verificar la existencia de un vertice");
            System.out.println("2. Verificar si el arreglo de vertices está vacio");
            System.out.println("3. Insertar un nuevo vertice");
            System.out.println("4. Actualizar el numero de un vertice");
            System.out.println("5. Eliminar un vertice");
            System.out.println("0. Salir");
            System.out.print("Elija una opcion: ");
            opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Ingrese el nombre del vertice a verificar: ");
                    scanner.nextLine();
                    String nombreCheck = scanner.nextLine();
                    boolean existe = Utiles.check_vertice(vertices, nombreCheck);
                    System.out.println("El vertice " + nombreCheck + " " + (existe ? "existe." : "no existe."));
                    break;
                case 2:
                    boolean vacio = Utiles.isEmpty_vertices(vertices);
                    System.out.println("El arreglo de vertices " + (vacio ? "está vacio." : "no está vacio."));
                    break;
                case 3:
                    System.out.print("Ingrese el nombre del nuevo vertice: ");
                    scanner.nextLine();
                    String nombreNuevo = scanner.nextLine();
                    System.out.print("Ingrese el número del nuevo vertice: ");
                    int numeroNuevo = scanner.nextInt();
                    Utiles.insert_vertice(vertices, nombreNuevo, numeroNuevo);
                    System.out.println("Vertice insertado correctamente.");
                    break;
                case 4:
                    System.out.print("Ingrese el nombre del vertice a actualizar: ");
                    scanner.nextLine();
                    String nombreUpdate = scanner.nextLine();
                    System.out.print("Ingrese el nuevo numero del vertice: ");
                    int numeroUpdate = scanner.nextInt();
                    Utiles.update_vertice(vertices, nombreUpdate, numeroUpdate);
                    System.out.println("Vertice actualizado correctamente.");
                    break;
                case 5:
                    System.out.print("Ingrese el nombre del vertice a eliminar: ");
                    scanner.nextLine();
                    String nombreDelete = scanner.nextLine();
                    Utiles.delete_vertice(vertices, nombreDelete);
                    System.out.println("Vertice eliminado correctamente.");
                    break;
                case 0:
                    System.out.println("Saliendo del programa...");
                    break;
                default:
                    System.out.println("Opcion no valida. Intentelo de nuevo.");
                    break;
            }
        } while (opcion != 0);

        scanner.close();
    }
}


///// Clase Vertice

public class Vertice {
    String nombre;
    int numero;

    // Constructor de la clase Vertice
    public Vertice(String nombre, int numero) {
        this.nombre = nombre;
        this.numero = numero;
    }
}


///// Clase Utiles

public class Utiles {
    // Función para verificar la existencia de un vértice
    public static boolean check_vertice(Vertice[] vertices, String nombre) {
        for (Vertice vertice : vertices) {
            if (vertice != null && vertice.nombre.equals(nombre)) {
                return true;
            }
        }
        return false;
    }

    // Funcion para verificar si el arreglo de vertices está vacio
    public static boolean isEmpty_vertices(Vertice[] vertices) {
        for (Vertice vertice : vertices) {
            if (vertice != null) {
                return false;
            }
        }
        return true;
    }

    // Funcion para insertar un vértice en el arreglo
    public static void insert_vertice(Vertice[] vertices, String nombre, int numero) {
        for (int i = 0; i < vertices.length; i++) {
            if (vertices[i] == null) {
                vertices[i] = new Vertice(nombre, numero);
                break;
            }
        }
    }

    // Función para actualizar el número de un vértice
    public static void update_vertice(Vertice[] vertices, String nombre, int nuevoNumero) {
        for (Vertice vertice : vertices) {
            if (vertice != null && vertice.nombre.equals(nombre)) {
                vertice.numero = nuevoNumero;
                break;
            }
        }
    }

    // Función para eliminar un vértice del arreglo
    public static void delete_vertice(Vertice[] vertices, String nombre) {
        for (int i = 0; i < vertices.length; i++) {
            if (vertices[i] != null && vertices[i].nombre.equals(nombre)) {
                vertices[i] = null;
                break;
            }
        }
    }
}


