//////Ejercicio B 3

#include <stdio.h>
#include <stdlib.h>
void mostrar_menu() {
    printf("Menú:\n");
    printf("1- Comenzar programa\n");
    printf("2- Imprimir listado\n");
    printf("3- Finalizar programa\n");
}
void comenzar_programa() {
    printf("El programa ha comenzado.\n");
}
void imprimir_listado() {
    printf("Se ha impreso el listado.\n");
}
void finalizar() {
    printf("El programa ha finalizado.\n");
    exit(0);
}
int main() {
    int opcion;

    while (1) {
        mostrar_menu();
        printf("Seleccione una opción (1, 2 o 3): ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                comenzar_programa();
                break;
            case 2:
                imprimir_listado();
                break;
            case 3:
                finalizar();
                break;
            default:
                printf("Opción incorrecta. Por favor, seleccione 1, 2 o 3.\n");
                break;
        }
    }
    return 0;
}

//////Ejercicio B 4
#include <stdio.h>

int main() {
    int numero;

    printf("Ingrese números enteros. Ingrese 0 para terminar.\n");

    do {
        printf("Ingrese un número: ");
        scanf("%d", &numero);

        if (numero != 0) {
            // Hacer algo con el número, aquí puedes agregar tu lógica
            printf("Número ingresado: %d\n", numero);
        }
    } while (numero != 0);

    printf("Programa finalizado.\n");

    return 0;
}

////// EJERCICIO C 2
#include <stdio.h>

int main() {
    int numero;

    printf("Ingrese números enteros. Ingrese 0 para terminar.\n");

    do {
        printf("Ingrese un número: ");
        scanf("%d", &numero);

        switch (numero) {
            case 0:
                printf("Programa finalizado.\n");
                break;
            default:
                printf("Número ingresado: %d\n", numero);
                break;
        }
    } while (numero != 0);

    return 0;
}

////// EJERCICIO D 2

#include <stdio.h>

void imprimir_triangulo(char letra, int anchura) {
    if (anchura <= 0) {
        printf("La anchura debe ser mayor que 0.\n");
        return;
    }

    for (int i = anchura; i > 0; i--) {
        for (int j = 0; j < i; j++) {
            printf("%c", letra);
        }
        printf("\n");
    }
}

int main() {
    char letra;
    int anchura;

    printf("Ingrese una letra o un numero: ");
    scanf(" %c", &letra);
    printf("Ingrese la anchura del triángulo: ");
    scanf("%d", &anchura);

    imprimir_triangulo(letra, anchura);

    return 0;
}

///////// EJERCICIO E 4

#include <stdio.h>
#include <string.h>

int main() {
    char arreglo_original[] = {'a', 'b', 'c', 'd', 'e', 'f'};
    char arreglo_inverso[6];

    for (int i = 0; i < 6; i++) {
        arreglo_inverso[i] = arreglo_original[5 - i];
    }

    printf("Arreglo original: ");
    for (int i = 0; i < 6; i++) {
        printf("%c ", arreglo_original[i]);
    }
    printf("\n");

    printf("Arreglo inverso: ");
    for (int i = 0; i < 6; i++) {
        printf("%c ", arreglo_inverso[i]);
    }
    printf("\n");

    return 0;
}


//////// EJERCICIO E 8

#include <stdio.h>
int main() {
    int matriz[2][3];
    int positivos = 0;
    int negativos = 0;
    printf("Ingrese los elementos de la matriz 2x3:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);

            if (matriz[i][j] > 0) {
                positivos++;
            } else if (matriz[i][j] < 0) {
                negativos++;
            }
        }
    }
    printf("\nMatriz ingresada:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }
    printf("\nCantidad de números positivos: %d\n", positivos);
    printf("Cantidad de números negativos: %d\n", negativos);

    return 0;
}

/////// EJERCICIO E 13

#include <stdio.h>

#define GRADOS 2
#define ALUMNOS_POR_GRADO 5

int main() {
    int notas[GRADOS][ALUMNOS_POR_GRADO];
    float promedio_grados[GRADOS] = {0};
    int mayor_nota = 0;
    int alumnos_aprobados[GRADOS] = {0};
    int alumnos_reprobados[GRADOS] = {0};

    printf("Ingrese las notas de los alumnos:\n");
    for (int i = 0; i < GRADOS; i++) {
        printf("Grado %d:\n", i + 1);
        for (int j = 0; j < ALUMNOS_POR_GRADO; j++) {
            printf("Nota del alumno %d: ", j + 1);
            scanf("%d", &notas[i][j]);

            promedio_grados[i] += notas[i][j];

            if (notas[i][j] >= 7) {
                alumnos_aprobados[i]++;
            } else {
                alumnos_reprobados[i]++;
            }
            if (notas[i][j] > mayor_nota) {
                mayor_nota = notas[i][j];
            }
        }
        promedio_grados[i] /= ALUMNOS_POR_GRADO;
    }

    printf("\nPromedio de cada grado:\n");
    for (int i = 0; i < GRADOS; i++) {
        printf("Grado %d: %.2f\n", i + 1, promedio_grados[i]);
    }

    printf("\nLa mayor nota en general es: %d\n", mayor_nota);

    printf("\nTodas las notas:\n");
    for (int i = 0; i < GRADOS; i++) {
        printf("Grado %d:\n", i + 1);
        for (int j = 0; j < ALUMNOS_POR_GRADO; j++) {
            printf("Alumno %d: %d\n", j + 1, notas[i][j]);
        }
    }
    printf("\nCantidad de alumnos que aprobaron y reprobaron de cada grado:\n");
    for (int i = 0; i < GRADOS; i++) {
        printf("Grado %d:\n", i + 1);
        printf("Aprobados: %d\n", alumnos_aprobados[i]);
        printf("Reprobados: %d\n", alumnos_reprobados[i]);
    }

    return 0;
}


/////// EJERCICIO E 15

#include <stdio.h>

#define NUM_CIUDADES 5

int ruta_entre_ciudades[NUM_CIUDADES][NUM_CIUDADES] = {0};

void cargar_ruta() {
    printf("Ingrese las distancias entre ciudades:\n");
    for (int i = 0; i < NUM_CIUDADES; i++) {
        for (int j = 0; j < NUM_CIUDADES; j++) {
            if (i != j) {
                printf("Distancia entre la ciudad %d y la ciudad %d: ", i, j);
                scanf("%d", &ruta_entre_ciudades[i][j]);
            }
        }
    }
}

void modificar_ruta(int ciudad1, int ciudad2, int distancia) {
    ruta_entre_ciudades[ciudad1][ciudad2] = distancia;
}
void mostrar_relaciones() {
    printf("Información cargada:\n");
    for (int i = 0; i < NUM_CIUDADES; i++) {
        for (int j = 0; j < NUM_CIUDADES; j++) {
            printf("%d ", ruta_entre_ciudades[i][j]);
        }
        printf("\n");
    }
}
void mostrar_cant_con_rutas() {
    int ciudades_con_rutas = 0;
    for (int i = 0; i < NUM_CIUDADES; i++) {
        for (int j = 0; j < NUM_CIUDADES; j++) {
            if (ruta_entre_ciudades[i][j] != 0) {
                ciudades_con_rutas++;
                break;
            }
        }
    }
    printf("Cantidad de ciudades relacionadas por una ruta: %d\n", ciudades_con_rutas);
}
void mostrar_cant_sin_rutas() {
    int ciudades_sin_rutas = 0;
    for (int i = 0; i < NUM_CIUDADES; i++) {
        int tiene_ruta = 0;
        for (int j = 0; j < NUM_CIUDADES; j++) {
            if (ruta_entre_ciudades[i][j] != 0) {
                tiene_ruta = 1;
                break;
            }
        }
        if (!tiene_ruta) {
            ciudades_sin_rutas++;
        }
    }
    printf("Cantidad de ciudades sin ruta que las relacione: %d\n", ciudades_sin_rutas);
}

void mostrar_distancia_entre_ciudades(int ciudad1, int ciudad2) {
    if (ruta_entre_ciudades[ciudad1][ciudad2] != 0) {
        printf("La distancia entre la ciudad %d y la ciudad %d es de %d kilómetros.\n", ciudad1, ciudad2, ruta_entre_ciudades[ciudad1][ciudad2]);
    } else {
        printf("No hay ruta entre la ciudad %d y la ciudad %d.\n", ciudad1, ciudad2);
    }
}

int main() {
    cargar_ruta();
    modificar_ruta(0, 1, 100);
    mostrar_relaciones();
    mostrar_cant_con_rutas();
    mostrar_cant_sin_rutas();
    mostrar_distancia_entre_ciudades(2, 3);
    return 0;
}


